services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: konecta-postgres
    environment:
      POSTGRES_DB: konecta_erp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - konecta-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d konecta_erp"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Authentication Service
  authentication-service:
    build:
      context: ./backend/AuthenticationService
      dockerfile: Dockerfile
    container_name: konecta-auth-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=konecta_erp;Username=postgres;Password=postgres123
      - JwtSettings__SecretKey=YourSuperSecretKeyForJWTTokenGenerationMinimum32Characters
      - JwtSettings__Issuer=KonectaERP
      - JwtSettings__Audience=KonectaERPUsers
      - JwtSettings__ExpirationMinutes=60
      - Consul__Enabled=true
      - RUN_MIGRATIONS=true
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - konecta-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: konecta-frontend
    environment:
      - NODE_ENV=production
    ports:
      - "4200:80"
    depends_on:
      authentication-service:
        condition: service_healthy
    networks:
      - konecta-network
    restart: unless-stopped

  # Optional: Consul for Service Discovery (disabled by default)
  consul:
    image: consul:1.16-alpine
    container_name: konecta-consul
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0 -bind=0.0.0.0
    ports:
      - "8500:8500"
    networks:
      - konecta-network
    profiles:
      - consul
    restart: unless-stopped

  # Optional: Redis for Caching (if needed later)
  redis:
    image: redis:7-alpine
    container_name: konecta-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - konecta-network
    profiles:
      - cache
    restart: unless-stopped

networks:
  konecta-network:
    driver: bridge
    name: konecta-network

volumes:
  postgres_data:
    name: konecta_postgres_data
  redis_data:
    name: konecta_redis_data