name: All Services CI/CD

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

env:
  DOTNET_VERSION: '8.0.x'
  POSTGRES_VERSION: '15-alpine'
  CONTAINER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [AuthenticationService, UserManagementService]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: konecta_erp_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ./backend/${{ matrix.service }}/${{ matrix.service }}.csproj

    - name: Build solution
      run: dotnet build ./backend/${{ matrix.service }}/${{ matrix.service }}.csproj --configuration Release --no-restore

    - name: Run unit tests
      run: |
        if [ -d "./backend/${{ matrix.service }}.Tests" ]; then
          dotnet test ./backend/${{ matrix.service }}.Tests/${{ matrix.service }}.Tests.csproj --configuration Release --no-build --verbosity normal
        else
          echo "No test project found, skipping unit tests"
        fi

    - name: Run integration tests
      run: |
        dotnet test ./backend/${{ matrix.service }}.IntegrationTests/${{ matrix.service }}.IntegrationTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger "console;verbosity=detailed"
      env:
        ConnectionStrings__DefaultConnection: Host=localhost;Port=5432;Database=konecta_erp_test;Username=postgres;Password=postgres123
        ASPNETCORE_ENVIRONMENT: Test
        JwtSettings__SecretKey: TestSecretKeyForJWTTokenGenerationMinimum32Characters!
        JwtSettings__Issuer: TestKonectaERP
        JwtSettings__Audience: TestKonectaERPUsers

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: actions/dependency-review-action@v3

    - name: Run .NET security check
      run: |
        dotnet list ./backend/${{ matrix.service }}/${{ matrix.service }}.csproj package --vulnerable

    - name: Run trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push container
      uses: docker/build-push-action@v5
      with:
        context: ./backend/${{ matrix.service }}
        file: ./backend/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/develop'
    
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: kubectl apply, docker-compose, etc.
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/main'
    
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
      env:
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}